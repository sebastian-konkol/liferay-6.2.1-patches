{"name":"Liferay-6.2.1-patches","tagline":"Liferay 6.2.1 patches","body":"### Solution for issue with authentication by email under Liferay 6.2.1 version.\r\n###Background\r\nFor one of our customers we are upgrading Liferay from version 6.0.5 to 6.2.1. Some parts of our client code had ability to talk to Liferay through web services. Also, users that were connecting to Liferay used their emails as logins. In 6.0.5 version Liferay used different approach when you tried to login through WWW interface or through web service. Now, it was unified. I cannot agree or disagree with this unification. However new approach introduced serious issue if you tried to connect to Liferay 6.2.1 through web services using Apache Axis. \r\n###Issue\r\nLiferay introduced basic authentication that looks like this: http://username:password@localhost:8081/my_portlet/api/axis. Everything works OK as long as you will not try to authenticate with email. When you try to authenticate with email lets say:\r\nhttp://my@email.com:password@localhost:8081/my_portlet/api/axis it's clear that the link will be broken. So turning on email authentication renders Liferay pretty much useless. \r\n###Solution\r\nWell there is solution to that. Firstly, you should encode \"@\" as %40 (e.g.: http://my%40email.com:password@localhost:8081/my_portlet/api/axis) but it does not work out of the box. Well that sucks because authors of LoginUtil didn't tried actually to decode login from URL (maybe there is a purpose in that - i don't know). So, to put up simply you have to patch LoginUtil so it could correctly get login information from LoginUtil. It goes like this:\r\n\r\n```\r\n       try {\r\n            login  = URLDecoder.decode(login, \"UTF-8\");\r\n        } catch (UnsupportedEncodingException e) {\r\n           //do nothing we just tried to fix-up login but we failed\r\n        }\r\n```\r\nas in file: https://github.com/sebastian-konkol/liferay-6.2.1-patches/blob/master/src/main/java/com/liferay/portlet/login/util/LoginUtil.java#L68-L72\r\n\r\nYou can also clone attached project from repository, compile it using maven and place it inside ROOT.war/WEB-INF/classes/ directory. Then your modified class will always be compiled before any other jar files. Also, the other possibility is just to compile it inside portal-impl.jar. Both ways works the same.\r\n\r\n### Support or Contact\r\nHaving trouble with this patch? Email me or twitter @neuvio. ","google":"UA-55265709-1","note":"Don't delete this file! It's used internally to help with page regeneration."}